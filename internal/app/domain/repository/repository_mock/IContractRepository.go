// Code generated by mockery v2.13.0-beta.1. DO NOT EDIT.

package repository_mock

import (
	mock "github.com/stretchr/testify/mock"

	valueobject "ginger-beer/internal/app/domain/valueobject"
)

// IContractRepository is an autogenerated mock type for the IContractRepository type
type IContractRepository struct {
	mock.Mock
}

// GetEntities provides a mock function with given fields:
func (_m *IContractRepository) GetEntities() (map[string][]*valueobject.Field, error) {
	ret := _m.Called()

	var r0 map[string][]*valueobject.Field
	if rf, ok := ret.Get(0).(func() map[string][]*valueobject.Field); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]*valueobject.Field)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewIContractRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewIContractRepository creates a new instance of IContractRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIContractRepository(t NewIContractRepositoryT) *IContractRepository {
	mock := &IContractRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
